Title:
Notice:    Licensed to the Apache Software Foundation (ASF) under one
           or more contributor license agreements.  See the NOTICE file
           distributed with this work for additional information
           regarding copyright ownership.  The ASF licenses this file
           to you under the Apache License, Version 2.0 (the
           "License"); you may not use this file except in compliance
           with the License.  You may obtain a copy of the License at
           .
             http://www.apache.org/licenses/LICENSE-2.0
           .
           Unless required by applicable law or agreed to in writing,
           software distributed under the License is distributed on an
           "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
           KIND, either express or implied.  See the License for the
           specific language governing permissions and limitations
           under the License.

# Scala & Spark Bindings:
*Bringing algebraic semantics*

## What is Scala & Spark Bindings?

In short, Scala & Spark Bindings for Mahout is Scala DSL and algebraic optimizer of something like this (actual formula from **(d)spca**):
        

`\[\mathbf{G}=\mathbf{B}\mathbf{B}^{\top}-\mathbf{C}-\mathbf{C}^{\top}+\mathbf{s}_{q}\mathbf{s}_{q}^{\top}\boldsymbol{\xi}^{\top}\boldsymbol{\xi}\]`


Mahout Scala & Spark Bindings expression of the above:

        val g = bt.t %*% bt - c - c.t + (s_q cross s_q) * (xi dot xi)

The main idea is that a scientist writing algebraic expressions cannot care less of distributed 
operation plans and works **entirely on the logical level** just like he or she would do with R.

Another idea is decoupling logical expression from distributed back-end. As more back-ends are added, 
this implies **"write once, run everywhere"**.

The linear algebra side works with scalars, in-core vectors and matrices, and Mahout Distributed
Row Matrices (DRMs).

The ecosystem of operators is built in the R's image, i.e. it follows R naming such as %*%, 
colSums, nrow, length operating over vectors or matices. 

Important part of Spark Bindings is expression optimizer. It looks at expression as a whole 
and figures out how it can be simplified, and which physical operators should be picked. For example,
there are currently about 5 different physical operators performing DRM-DRM multiplication
picked based on matrix geometry, distributed dataset partitioning, orientation etc. 
If we count in DRM by in-core combinations, that would be at another 4 -- all of it for just 
simple x %*% y logical notation.



Please refer to the documentation for details.

## Status

At this point, this environment addresses Linear Algebra side of things only. 
However, it would be very exciting to include statistics and data frame support too. 

Also, this is early stage and experimental at this point. 
Tweaks may be needed here and there for performance on case-per-case basis. 
But being run on Spark, and assuming there's enough RAM not to swap intermediate products 
of computation to disk, it should be as fast as it can be expected of in-memory matrix 
block manipulations in Mahout and IO associated with the use of Spark distributed primitives.


## Documentation

* [Scala and Spark bindings manual](ScalaSparkBindings.pdf)

## Distributed methods and solvers using Bindings

* Distributed Stochastic SVD (dsvd) -- guinea pig -- see the bindings manual
* Distributed Stochastic PCA (dspca) -- guinea pig -- see the bindings manual
* Distributed thin QR decomposition (thinQR) -- guinea pig -- see the bindings manual 

## Related history 

* [MAHOUT-1346](https://issues.apache.org/jira/browse/MAHOUT-1346) -- Spark Bindings
* [MAHOUT-1297](https://issues.apache.org/jira/browse/MAHOUT-1297) -- Scala Bindings

## Work in progress 
* RSJ -- [MAHOUT-1464](https://issues.apache.org/jira/browse/MAHOUT-1464)
* Weighed (Implicit Feedback) ALS -- [MAHOUT-1365](https://issues.apache.org/jira/browse/MAHOUT-1365)
* *Your issue here!*

## Stuff wanted: 
* Interactive linalg shell & script processor -- high priority, any takers?
* Data frame R-like bindings (similarly to linalg bindings)
* Stat R-like bindings (perhaps we can just adapt to commons.math stat)
* **BYODMs:** Bring Your Own Distributed Method on SparkBindings! 
* In-core jBlas matrix adapter
* In-core GPU matrix adapters



  