Title:
Notice:    Licensed to the Apache Software Foundation (ASF) under one
           or more contributor license agreements.  See the NOTICE file
           distributed with this work for additional information
           regarding copyright ownership.  The ASF licenses this file
           to you under the Apache License, Version 2.0 (the
           "License"); you may not use this file except in compliance
           with the License.  You may obtain a copy of the License at
           .
             http://www.apache.org/licenses/LICENSE-2.0
           .
           Unless required by applicable law or agreed to in writing,
           software distributed under the License is distributed on an
           "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
           KIND, either express or implied.  See the License for the
           specific language governing permissions and limitations
           under the License.

# Scala Bindings & Spark Bindings Home

## What is Scala & Spark Bindings?

In short, Scala DSL and algebraic optimizer of something like this: 

        val bbt = bt.t %*% bt -c - c.t +  (s_q cross s_q) * (xi * xi).sum

involving combination of in-core mahout-math vectors, in-core matrices and Spark-backed in-memory Mahout DRMs. 
For more details, see the manual/working notes below.

## The Bindings 

* [Scala and Spark bindings manual](ScalaSparkBindings.pdf)

### Related history 

* [MAHOUT-1346](https://issues.apache.org/jira/browse/MAHOUT-1346) -- Spark Bindings
* [MAHOUT-1297](https://issues.apache.org/jira/browse/MAHOUT-1297) -- Scala Bindings

## Distributed methods and solvers 

* Distributed Stochastic SVD (dsvd) -- guinea pig -- see the bindings manual
* Distributed Stochastic PCA (dspca) -- guinea pig -- see the bindings manual 

## Work in progress 
* RSJ -- [MAHOUT-1464](https://issues.apache.org/jira/browse/MAHOUT-1464)
* Weighed (Implicit Feedback) ALS -- [MAHOUT-1365](https://issues.apache.org/jira/browse/MAHOUT-1365)


## Stuff wanted: 
* Interactive linalg shell
* In-core jBlas matrix adapter
* In-core GPU matrix adapters
* Stat R-like bindings (perhaps we can just adapt to commons.math stat)
* Data frame R-like bindings (similarly to linalg bindings)
* **BYODMs:** Bring Your Own Distributed Method on SparkBindings! 



  