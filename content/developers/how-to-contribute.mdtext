Title: How To Contribute

# How to contribute

*Contributing to an Apache project* is about more than just writing code --
it's about doing what you can to make the project better.  There are lots
of ways to contribute!

<a name="HowToContribute-BeInvolved"></a>
## Be Involved

Contributors should join the [Mahout mailing lists](/general/mailing-lists,-irc-and-archives.html).  In particular:

* The **user list** (to help others)
* The **development list** (to join discussions of changes)  -- This is the best place
to understand where we are headed.
* The **commit list** (to see changes as they are made)

Please keep discussions about Mahout on list so that everyone benefits. 
Emailing individual committers with questions about specific Mahout issues
is discouraged.  See [http://people.apache.org/~hossman/#private_q](http://people.apache.org/~hossman/#private_q)
.

<a name="HowToContribute-WhattoWorkOn?"></a>
## What to Work On?

What do you like to work on?  There are a ton of things in Mahout that we
would love to have contributions for: documentation, performance improvements, better tests, etc.
The best place to start is by looking into our [issue tracker](https://issues.apache.org/jira/browse/MAHOUT) and
seeing what bugs have been reported and seeing if any look like you could
take them on.  Small, well written, well tested patches are a great way to
get your feet wet.  It could be something as simple as fixing a typo.  The
more important piece is you are showing you understand the necessary steps
for making changes to the code.  Mahout is a pretty big beast at this
point, so changes, especially from non-committers, need to be evolutionary
not revolutionary since it is often very difficult to evaluate the merits
of a very large patch.	Think small, at least to start\!

Beyond JIRA, hang out on the dev@ mailing list. That's where we discuss
what we are working on in the internals and where you can get a sense of
where people are working.

Also, documentation is a great way to familiarize yourself with the code
and is always a welcome addition to the codebase and this website. Feel free 
to contribute texts and tutorials! Committers will make sure they are added 
to this website.

If you are interested in working towards being a committer, [general guidelines are available online](/developers/how-to-become-a-committer.html).

<a name="HowToContribute-ContributingCode(Features,BigFixes,Tests,etc...)"></a>
## Contributing Code (Features, Big Fixes, Tests, etc...)

This section identifies the ''optimal'' steps community member can take to
submit a changes or additions to the Mahout code base.	This can be new
features, bug fixes optimizations of existing features, or tests of
existing code to prove it works as advertised (and to make it more robust
against possible future changes).

Please note that these are the "optimal" steps, and community members that
don't have the time or resources to do everything outlined on this below
should not be discouraged from submitting their ideas "as is" per "Yonik
Seeley's (Solr committer) Law of Patches": 

*A half-baked patch in Jira, with no documentation, no tests and no backwards compatibility is better than no patch at all.*

Just because you may not have the time to write unit tests, or cleanup
backwards compatibility issues, or add documentation, doesn't mean other
people don't. Putting your patch out there allows other people to try it
and possibly improve it.

<a name="HowToContribute-Gettingthesourcecode"></a>
## Getting the source code

First of all, you need to get the [Mahout source code](/developers/version-control.html). Most development is done on the "trunk".


<a name="HowToContribute-MakingChanges"></a>
## Making Changes

Before you start, you should send a message to the [Mahout developer mailing list](/general/mailing-lists,-irc-and-archives.html)
(note: you have to subscribe before you can post), or file a ticket in  our [issue tracker](/developers/issue-tracker.html).
Describe your proposed changes and check that they fit in with what others are doing and have planned for the project.  Be patient, it may take folks a while to understand your requirements.

Modify the source code and add some (very) nice features.

But take care about the following points

 * All public classes and methods should have informative Javadoc comments.
 * Code should be formatted according to the official [](http://www.oracle.com/technetwork/java/codeconventions-150003.pdf), with two exceptions:
  * indent two spaces per level, not four
  * lines can be 120 characters, not 80
 * Contributions should pass existing unit tests.
 * New unit tests should be provided to demonstrate bugs and fixes

<a name="HowToContribute-Generatingapatch"></a>
### Generating a patch

A "patch file" is the format that all good contributions come in.  It
bundles up everything that is being added, removed, or changed in your
contribution.

<a name="HowToContribute-UnitTests"></a>
#### Unit Tests

Please make sure that all unit tests succeed before constructing your
patch.

Run *mvn clean test*, if you see *BUILD SUCCESSFUL* after the tests have finished, all is ok, but if you see *BUILD FAILED*, 
please carefully read the errors messages and check your code.

<a name="HowToContribute-Creatingthepatchfile"></a>
#### Creating the patch file

Check to see what files you have modified with *svn st*, add new files with *svn add src/.../MyNewClass.java*

Subversions "add" command only modifies your local copy, so it does not
require commit permissions.  By using "svn add", your entire contribution
can be included in a single patch file, without needing to submit a
seperate set of "new" files.

Edit the ''CHANGELOG.txt'' file, adding a description of your change,
including the bug number it fixes. In order to create a patch, just type:

*svn diff > MAHOUT-$issuenumber.patch*

*$issuenumber* here should be the number of the JIRA issue the patch is
supposed to fix. This will report all modifications done on Mahout sources
on your local disk and save them into the ''MAHOUT-$issuenumber.patch''
file.  Read the patch file. Make sure it includes ONLY the modifications
required to fix a single issue.

Please do not:

* reformat code unrelated to the bug being fixed: formatting changes should
be separate patches/commits.
* comment out code that is now obsolete: just remove it.
* insert comments around each change, marking the change: folks can use
subversion to figure out what's changed and by whom.
* make things public which are not required by end users.

Please do:

* try to adhere to the coding style of files you edit;
* comment code whose function or rationale is not obvious;
* update documentation (e.g., ''package.html'' files, this wiki, etc.)

<a name="HowToContribute-Contributingyourwork"></a>
#### Contributing your work

Finally, patches should be attached to a ticket in our [issue tracker](/developers/issue-tracker.html).  If you are revising an existing patch, please re-use the exact same name
as the previous attachment, Jira will "grey out" the older versions so it's clear which version is the newest.

Please be patient. Committers are busy people too. If no one responds to your patch after a few days, please make friendly reminders.  Please
incorporate other's suggestions into into your patch if you think they're reasonable.  Finally, remember that even a patch that is not committed is useful to the community.


<a name="HowToContribute-Review/ImproveExistingPatches"></a>
## Review/Improve Existing Patches

If there's a Jira issue that already has a patch you think is really good, and works well for you -- please add a comment saying so.   If there's room
for improvement (more tests, better javadocs, etc...) then make the changes and attach it as well.	If a lot of people review a patch and give it a
thumbs up, that's a good sign for committers when deciding if it's worth spending time on the patch -- and if other people have already put in
effort to improve the docs/tests for a patch, that helps even more.

<a name="HowToContribute-Applyingapatch"></a>
## Applying a patch

From the base directory (assuming that is where the patch is generated from), run:

*patch [--dry-run] -p0 -i <PATH TO PATCH> *

