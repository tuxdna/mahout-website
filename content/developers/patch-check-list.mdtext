Title: Patch Check List

# Patch Check List

So, you want to apply a patch - or you want to know in more detail what committers look for in your patches?
Here are tips, traps, etc. for dealing with
patches:

  - Get a fresh copy of trunk.  Or at least make sure you are up to date and
clean your build area.	For complex patches, it is recommended you deal
with a fresh checkout.
  - Look at the patch and see where it is applied.  Ideally it is generated
from the root, but not everyone does this.
  - Apply the patch with *patch \-p 0 \-i &lt;path to patch&gt;*  Throw a *\--dry-run* on there if you want
to see what happens w/o screwing up your checkout.
  - Did the author write unit tests?  Are the unit tests worthwhile?
  - Are the licenses correct on newly added files? Has an ASF license been
granted?
  - Update the [CHANGELOG][1] file.  Give proper credit to the authors.
  - Make sure you update JIRA by assigning the issue to you so that others
know you are working on it.
  - If it is a complex change and you have added to the original author's
patch, it is suggested that you create a new patch and attach that to JIRA
so that it can be discussed.
  - How is the documentation, especially the javadocs?
  - Before committing, make sure you add any new documents to SVN.  Just because
the patch added them doesn't mean you have :)
  - Run all unit tests, verify that all tests pass.
  - Put in a meaningful commit message, referencing the JIRA issue.
  - Remember to update the issue in JIRA when you have completed it.


  [1]: https://svn.apache.org/viewvc/mahout/trunk/CHANGELOG?view=markup "CHANGELOG"